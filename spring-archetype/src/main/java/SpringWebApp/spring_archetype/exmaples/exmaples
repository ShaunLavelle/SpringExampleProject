package uk.co.utilisoft.comparisontool.email;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.stereotype.Component;

@Component
public class SendMailService
{
  @Autowired
  private MailSender mailSender;
  
  public void sendEmailToRecipients(/*AlertType alertType*/) {
    String[] myStringArray = {"Shaun.Lavelle@utiligroup.com"};
    SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
    simpleMailMessage.setFrom("Alert@ComparisonTool.com");
    simpleMailMessage.setTo(myStringArray);
    simpleMailMessage.setSubject("ALERT");
    simpleMailMessage.setText("It Works! (From Comparison Tool)");
    mailSender.send(simpleMailMessage);
  }
  
  //Every Second
//  @Scheduled(cron="* * * * * *")
  public void sendAutomatedEmails() {
    sendEmailToRecipients(/*TYPE*/);
   }
  //Every day at 1am
  //@Scheduled(cron="0 1 * * * *")
}


/*****************************************************************************************************/


package uk.co.utilisoft.comparisontool.config;

import java.util.Properties;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.scheduling.annotation.EnableScheduling;

@Configuration
@EnableScheduling
public class MailConfig {
  
    @Bean
    public JavaMailSender mailSender() {
        JavaMailSenderImpl javaMailSender = new JavaMailSenderImpl();
        Properties properties = new Properties();
        properties.setProperty("mail.transport.protocol", "smtp");
        properties.setProperty("mail.smtp.auth", "false");
        properties.setProperty("mail.smtp.starttls.enable", "false");
        properties.setProperty("mail.debug", "true");
        javaMailSender.setHost("ut-exchange-02");
        javaMailSender.setPort(25);
        javaMailSender.setUsername("utilisoft");
        javaMailSender.setPassword("formfill");
        javaMailSender.setJavaMailProperties(properties);
        return javaMailSender;
    }
}


/*****************************************************************************************************/

package uk.co.utilisoft.comparisontool.controller.editor;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import au.com.bytecode.opencsv.CSVReader;
import uk.co.utilisoft.comparisontool.domain.ScheduleRelease;
import uk.co.utilisoft.comparisontool.email.SendMailService;
import uk.co.utilisoft.comparisontool.service.ScheduleReleaseService;

/**
 * @author lavelles
 * @author varleyb
 */
@Controller
public class ScheduleReleaseController
{
  
  private static final String MDD_RELEASE_DATE = "MDD Release Date";
  
  @Resource
  ScheduleReleaseService scheduleReleaseService;
  
  @Autowired
  SendMailService sendMailService;
  
  @RequestMapping(value = "/editor/uploadSchedule.htm", method = RequestMethod.GET)
  public ModelAndView getSchedule()
  {
    return new ModelAndView("schedule/schedule");
  }
  
  @RequestMapping(value="/editor/uploadSchedule.htm", params="req=newSchedule", method = RequestMethod.POST)
  public ModelAndView uploadSchedule(@RequestParam(value = "schedule-version") int version, MultipartFile scheduleFile)
  {
    StringReader stringReader = null;
    CSVReader csvReader = null;
    try 
    {
      ByteArrayInputStream stream = new   ByteArrayInputStream(scheduleFile.getBytes());
      String myString = IOUtils.toString(stream, "UTF-8");
      stringReader = new StringReader(myString);
      csvReader = new CSVReader(stringReader);
      List<String[]> rows = csvReader.readAll();
      List<String> mddReleaseDates = new ArrayList<String>();
      for (String[] strings : rows)
      {
        mddReleaseDates.add(strings[9]);
      }
      for (int i = 0; i < mddReleaseDates.size(); i++)
      {
          if (mddReleaseDates.get(i).equals(MDD_RELEASE_DATE))
          {
              mddReleaseDates.remove(i);
              break;
          }
      }
      scheduleReleaseService.storeReleaseDates(mddReleaseDates, version);
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }
    finally 
    {
      stringReader.close();
      try
      {
        csvReader.close();
      }
      catch (IOException e)
      {
        e.printStackTrace();
      }  
    }
    return new ModelAndView("redirect:/scheduleViewer/scheduleChooser");
  }
  
  @RequestMapping("/displayAllReleases")
  public ModelAndView displayAllReleases(int versionNumber) {
    ModelAndView modelAndView = new ModelAndView("scheduleViewer/displayAllReleases");
    List<ScheduleRelease> scheduleReleases = scheduleReleaseService.retrieveAllReleases(versionNumber);
    modelAndView.addObject(scheduleReleases);
    return modelAndView;
  }
}


/*****************************************************************************************************/




